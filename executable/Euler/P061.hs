{- |
Module      :  Euler.P061
Description :  Problem 61
Copyright   :  (c) Sebastian Witte
License     :  WTFPL

Maintainer  :  woozletoff@gmail.com
Stability   :  experimental
Portability :  portable

Cyclical figurate numbers

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are
all figurate (polygonal) numbers and are generated by the following formulae:

Triangle 	  	P3,n=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Square 	  		P4,n=n2 	  	1, 4, 9, 16, 25, ...
Pentagonal 	  	P5,n=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	P6,n=n(2n−1) 	  	1, 6, 15, 28, 45, ...
Heptagonal 	  	P7,n=n(5n−3)/2 	  	1, 7, 18, 34, 55, ...
Octagonal 	  	P8,n=n(3n−2) 	  	1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
interesting properties.

    The set is cyclic, in that the last two digits of each number is the first
    two digits of the next number (including the last number with the first).
    Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and
    pentagonal (P5,44=2882), is represented by a different number in the set.
    This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which
each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and
octagonal, is represented by a different number in the set.
-}
module Euler.P061
       ( solve
       ) where

import Control.Applicative
import Data.Function (on)
import Data.List (groupBy, permutations, nub)
import Data.Vector ((!),Vector)
import qualified Data.Vector as Vector
import Euler.Numbers

solve :: Monad m => m Int
solve = return $ sum findCyclicSet

-- Create some lookup arrays which contain lists of numbers for every two-digit
-- number.
mkVector :: [Int] -> Vector [Int]
mkVector = Vector.fromList . construct 0
            . groupBy ((==) `on` fst) . fmap (`divMod` 100)
            . dropWhile (<1000) . takeWhile (<10000)
  where
    construct i (hs@((h,_):_):rs)
        | i < h = [] : construct (i+1) (hs:rs)
        | otherwise = filter (>9) (snd <$> hs) : construct (i+1) rs
    construct i _
        | i > 99 = []
        | otherwise = [] : construct (i+1) []

triangularVector :: Vector [Int]
triangularVector = mkVector triangulars

gonals :: [Vector [Int]]
gonals = mkVector <$> [ scanl1 (+) [1,3..], pentagonals
                      , hexagonals, heptagonals, octagonals ]

findCyclicSet :: [Int]
findCyclicSet = head . filter ((6==) . length)
    . concatMap (fmap (convertToNums triangularVector)
                 . findCyclicSet' [10..99] . (++[triangularVector]))
    $ permutations gonals

convertToNums :: Vector [Int] -> [Int] -> [Int]
convertToNums v xs
    | head xs `elem` (v ! last xs) = nub $ go (last xs : xs)
    | otherwise = []
  where
    go (x:y:ys) = x*100+y : go (y:ys)
    go _ = []

findCyclicSet' :: [Int] -> [Vector [Int]] -> [[Int]]
findCyclicSet' _ [] = [[]]
findCyclicSet' [] _ = []
findCyclicSet' xs (n:ns) = [ x:ys | x <- xs
                           , ys <- findCyclicSet' (n ! x) ns
                           ]

