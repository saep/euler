{- |
Module      :  Euler.P044
Description :  Problem 044
Copyright   :  (c) Sebastian Witte
License     :  WTFPL

Maintainer  :  woozletoff@gmail.com
Stability   :  experimental
Portability :  portable

Pentagon numbers

Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The
first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P(4) + P(7) = 22 + 70 = 92 = P(8). However, their
difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, P(j) and P(k), for which their
sum and difference are pentagonal and D = |P(k) − P(j)| is minimised;
what is the value of D?

-}
module Euler.P044
       ( solve
       ) where

import Control.Monad
import Data.Maybe
import Data.Monoid
import Data.IntMap (IntMap)
import qualified Data.IntMap as M
import Euler.Numbers (pentagonal)

solve :: IO ()
solve = print $ (\(j,k) -> pentagonal k - pentagonal j) solution

solution :: (Int, Int)
solution = findPair mempty [] [1..]

findPair :: IntMap Int -> [Int] -> [Int] -> (Int, Int)
findPair m ps (z:zs) =
    let pz = pentagonal z
        m' = M.insert pz z m
    in fromMaybe (findPair m' (pz:ps) zs) $ findD m' ps pz

-- p(z) = p(j) + p(k) <=> p(j) = p(z) - p(k)
findD :: IntMap Int -> [Int] -> Int -> Maybe (Int, Int)
findD _ [] _ = Nothing
findD m (pk:pks) pz
    | 2*pk - pz < 0 || (2*pk - pz) `M.member` m = pair m pz pk
    | otherwise = findD m pks pz

-- p(z) - p(k) = p(j)
-- p(k) - p(j) = p(k) - p(z) + p(k) = 2p(k) - p(z)

pair :: IntMap Int -> Int -> Int -> Maybe (Int, Int)
pair m pz pk = do
    j <- (pz - pk) `M.lookup` m
    guard $ (pk - pentagonal j) `M.member` m
    return (j, floor (sqrt (24*fromIntegral pk)) `div` 6)


