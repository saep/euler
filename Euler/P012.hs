{- |
Module      :  Euler.P012
Description :  Problem 12
Copyright   :  (c) Sebastian Witte
License     :  WTFPL

Maintainer  :  woozletoff@gmail.com
Stability   :  experimental
Portability :  portable

Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural
numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7
= 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five
divisors.

What is the value of the first triangle number to have over five
hundred divisors?


-}
module Euler.P012
       ( solve
       ) where

import Data.List
import Euler.Formulae (triangularNumber)
import Euler.Prime
import qualified Data.Map as M
import Control.Monad.State

solve :: IO Int
solve = return $ evalState (p12 1 [2..]) M.empty

p12 :: Int -> [Int] -> State (M.Map Int [Int]) Int
p12 dlast (x:xs) =
  do
    m <- get
    let fx = factors x
        p = head fx
        mx = maybe fx (insert p) $ M.lookup (x `div` p) m
        effectiveFactors = if even x then tail mx else mx
        divisorsx = (product . fmap (succ . length) . group) effectiveFactors

    modify $ M.insert x mx

    if dlast*divisorsx > 500
      then return $ triangularNumber (x-1)
      else p12 divisorsx xs
